use crate::ast::{Model, Part, Transition, Property, PropertySign, Formula, FormulaExpr, PartState, TopLevelItem, Action, ActionCall, Test, TestStatement};

grammar;

pub TopLevel: Vec<Model> = {
    <items:TopLevelItem*> => {
        let mut models = Vec::new();
        for item in items {
            if let TopLevelItem::Model(model) = item {
                models.push(model);
            }
        }
        models
    }
};

TopLevelItem: TopLevelItem = {
    <model:Model> => TopLevelItem::Model(model),
    <formula:Formula> => TopLevelItem::Formula(formula),
    <action:Action> => TopLevelItem::Action(action),
    <test:Test> => TopLevelItem::Test(test)
};

pub Model: Model = {
    <model:ModelDecl> => model
};

ModelDecl: Model = {
    "model" <name:Ident> ":" <parts:Part*> => {
        let mut model = Model::new(name);
        for part in parts {
            model.add_part(part);
        }
        model
    }
};

Part: Part = {
    "part" <name:Ident> ":" <transitions:Transition*> => {
        let mut part = Part::new(name);
        for transition in transitions {
            part.add_transition(transition);
        }
        part
    }
};

Transition: Transition = {
    <from:Ident> "-->" <to:Ident> => {
        Transition::new(from, to)
    },
    <from:Ident> "-->" <to:Ident> ":" <properties:PropertyList> => {
        let mut transition = Transition::new(from, to);
        for property in properties {
            transition.add_property(property);
        }
        transition
    }
};

PropertyList: Vec<Property> = {
    <property:Property> => vec![property],
    <properties:PropertyList> <property:Property> => {
        let mut props = properties;
        props.push(property);
        props
    }
};

Property: Property = {
    "+" <name:Ident> => Property::new(PropertySign::Plus, name),
    "-" <name:Ident> => Property::new(PropertySign::Minus, name)
};

// Action parsing
pub Action: Action = {
    <action:ActionDecl> => action
};

ActionDecl: Action = {
    "action" <name:Ident> ":" <properties:PropertyList> => {
        Action::new(name, properties)
    }
};

// Action call parsing
pub ActionCall: ActionCall = {
    <call:ActionCallExpr> => call
};

ActionCallExpr: ActionCall = {
    "action" "(" <arg:StringLiteral> ")" => ActionCall::new(arg)
};

// Test parsing - simplified for now
pub Test: Test = {
    <test:TestDecl> => test
};

TestDecl: Test = {
    "test" ":" => {
        Test::new(None)
    },
    "test" <name:Ident> ":" => {
        Test::new(Some(name))
    }
};

StringLiteral: String = {
    r#""[^"]*""# => {
        let s = <>.to_string();
        s[1..s.len()-1].to_string() // Remove quotes
    }
};

// Formula parsing
pub Formula: Formula = {
    <formula:FormulaDecl> => formula
};

FormulaDecl: Formula = {
    "formula" <name:Ident> ":" <expr:FormulaExpr> => {
        Formula::new(name, expr)
    }
};

FormulaExpr: FormulaExpr = {
    <expr:FormulaOrExpr> => expr
};

FormulaOrExpr: FormulaExpr = {
    <expr:FormulaAndExpr> => expr,
    <expr:FormulaOrExpr> "or" <expr2:FormulaAndExpr> => {
        FormulaExpr::Or(Box::new(expr), Box::new(expr2))
    }
};

FormulaAndExpr: FormulaExpr = {
    <expr:FormulaAtom> => expr,
    <expr:FormulaAndExpr> "and" <expr2:FormulaAtom> => {
        FormulaExpr::And(Box::new(expr), Box::new(expr2))
    }
};

FormulaAtom: FormulaExpr = {
    "true" => FormulaExpr::True,
    "false" => FormulaExpr::False,
    "(" <expr:FormulaExpr> ")" => {
        FormulaExpr::Paren(Box::new(expr))
    },
    "<" <properties:PropertyList> ">" <expr:FormulaAtom> => {
        FormulaExpr::Diamond(properties, Box::new(expr))
    },
    "[" <properties:PropertyList> "]" <expr:FormulaAtom> => {
        FormulaExpr::Box(properties, Box::new(expr))
    }
};

Ident: String = {
    r#"[a-zA-Z_][a-zA-Z0-9_]*"# => <>.to_string()
}; 